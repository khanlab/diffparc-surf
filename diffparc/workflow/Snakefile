# ---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"],
    )
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------


report: "../workflow/report/workflow.rst"


subj_wildcards = config["subj_wildcards"]
input_zip_lists = config["input_zip_lists"]


def get_eddy_quad_all():
    if config["eddy_no_quad"]:
        return {}
    else:
        return {
            "eddy_qc": expand(
                bids(
                    root="work",
                    datatype="dwi",
                    suffix="eddy.qc_pages",
                    **config["subj_wildcards"]
                ),
                zip,
                **config["input_zip_lists"]["dwi"]
            )
        }


def get_bedpost_all():
    if config["no_bedpost"]:
        return {}
    else:
        return {
            "bedpost": expand(
                bids(
                    root="results",
                    datatype="dwi",
                    suffix="diffusion.bedpostX",
                    desc="eddy",
                    space="T1w",
                    res=config["resample_dwi"]["resample_scheme"],
                    **config["subj_wildcards"]
                ),
                zip,
                **config["input_zip_lists"]["dwi"]
            )
        }


rule all_diffparc:
    input:
        conn_nii=expand(
            expand(
                bids(
                    root="results",
                    datatype="dwi",
                    hemi="{hemi}",
                    space="{template}",
                    desc="{targets}",
                    label="{seed}",
                    seedpervox="{seedpervox}",
                    segtype="maxprob",
                    suffix="dseg.nii.gz",
                    **config["subj_wildcards"],
                ),
                template=config["template"],
                targets=config["targets"].keys(),
                seed=config["seeds"].keys(),
                seedpervox=config["seeds_per_voxel"],
                hemi=config["hemispheres"],
                allow_missing=True,
            ),
            zip,
            **config["input_zip_lists"]["dwi"],
        ),


rule all_surfmorph:
    input:
        surfdisp=expand(
            expand(
                bids(
                    root="work",
                    **config["subj_wildcards"],
                    desc="inout",
                    from_="{template}",
                    datatype="morph",
                    label="{seed}",
                    parcel="{targets}",
                    seedspervertex="{seedspervertex}",
                    suffix="surfdisp.pscalar.nii",
                ),
                template=config["template"],
                hemi=config["hemispheres"],
                seed=config["seeds"].keys(),
                targets=config["targets"].keys(),
                seedspervertex=config["seeds_per_vertex"],
                allow_missing=True,
            ),
            zip,
            **config["input_zip_lists"]["dwi"],
        ),


rule all_preprocdwi:
    input:
        **get_eddy_quad_all(),
        **get_bedpost_all(),
        mask_qc=expand(
            bids(
                root="qc", suffix="mask.png", desc="brain", **config["subj_wildcards"]
            ),
            zip,
            **config["input_zip_lists"]["dwi"]
        ),
        reg_qc=expand(
            bids(
                root="qc",
                suffix="reg.png",
                from_="dwiref",
                to="T1w",
                **config["subj_wildcards"]
            ),
            zip,
            **config["input_zip_lists"]["dwi"]
        ),
        dtifit=expand(
            bids(
                root="results",
                datatype="dwi",
                suffix="dtifit",
                desc="eddy",
                space="T1w",
                res=config["resample_dwi"]["resample_scheme"],
                **config["subj_wildcards"]
            ),
            zip,
            **config["input_zip_lists"]["dwi"]
        ),


rule all:
    input:
        #        rules.all_diffparc.input,
        rules.all_surfmorph.input,
    default_target: True


include: "rules/prepdwi.smk"
include: "rules/reg_dwi_to_t1.smk"
include: "rules/masking_bet_from-b0.smk"
include: "rules/masking_b0_to_template.smk"
include: "rules/reg_t1_to_template.smk"
include: "rules/seg_t1_brain_tissue.smk"
include: "rules/diffparc.smk"
include: "rules/mrtrix.smk"
include: "rules/motioncorr.smk"
include: "rules/surfmorph.smk"
include: "rules/surftrack.smk"
